%% Load sto Files generated by Opensim and the Muscle Analysis Tool

% Load states
states = read_motionFile('Arm22_states.sto');

% Load controls
controls = read_motionFile('Arm22_controls.sto');

% Load muscle-tendon velocities
FiberVelocity = read_motionFile('analyze_MuscleAnalysis_FiberVelocity.sto');

% Load muscle-tendon lengths
Length = read_motionFile('analyze_MuscleAnalysis_Length.sto');

% Load elbow moments generated by each muscle
Moment_r_elbow_flex = read_motionFile('analyze_MuscleAnalysis_Moment_r_elbow_flex.sto');

% Load shoulder moments generated by each muscle
Moment_r_shoulder_elev = read_motionFile('analyze_MuscleAnalysis_Moment_r_shoulder_elev.sto');

% Compute Forward Kinematics from OpenSim data
[OS_FK.x, OS_FK.y, OS_FK.z, OS_FK.phi, OS_FK.theta, OS_FK.psi, OS_FK.RL] = ForwardKinematics(model,[states.data(:,2) states.data(:,4)]);

% Compute Mechanical power from OpenSim data
OS_pwr = zeros(size([states.data(:,1) states.data(:,1)],1),1);
for i=1:size([states.data(:,1) states.data(:,1)],1)
    OS_pwr(i,1) = [Moment_r_shoulder_elev.data(i,2)+Moment_r_shoulder_elev.data(i,3) Moment_r_elbow_flex.data(i,2)+Moment_r_elbow_flex.data(i,3)]*[states.data(i,3) states.data(i,5)]';
end

% Compute Mechanical work from OpenSim data
y = 0;
OS_wrk = y;
for i = 1 : length(states.data(:,1))-1
    t = states.data(i,1);
    s1 = odeFun(t,0,states.data(:,1),OS_pwr);
    s2 = odeFun(t+ts/2, 0, states.data(:,1), OS_pwr+ts.*s1/2);
    s3 = odeFun(t+ts/2,0, states.data(:,1), OS_pwr+ts.*s2/2);
    s4 = odeFun(t+ts, 0,states.data(:,1), OS_pwr+ts.*s3);
    y = y + ts*(s1 + 2*s2 + 2*s3 + s4)/6;
    OS_wrk = [OS_wrk; y];
end

function v = odeFun(t, ~, time, vx)
    v = interp1(time, vx, t, 'linear'); % linear interpolation
end